;; -*- lexical-binding: t -*-

(setq lister--v-minibuffer-exit-delay 0.1)

(defun lister-new ()
	(interactive)
  (let* (
		(lister (lister-curr-lister lister-curr))
	  (existing (lee-json-read (lister--json-name lister)))
    (new-record (list (mapcar (lambda (item)
	    (cons (field-template-name item)
		    (lister-user-input
		      (field-template-name item)
		      (field-template-type item)
		      (field-template-init item)
		    )
	    ))
	    (list-template-fields lister)
    ))))
		(let ((recs (if (null existing) new-record (append existing new-record))))
		  (lee-json-write recs (lister--json-name lister))
		)
  )
)

(defun lister-delete ()
	(interactive)
  (let* (
		  (lister (lister-curr-lister lister-curr))
	    (existing (lee-json-read (lister--json-name lister)))
		  (new-list '())
			(key-func (list-template-key lister))
			(match (cdr (assoc (lister-curr-sel lister-curr) (lister-curr-fmt-map lister-curr))))
			(match-key (funcall key-func match))
		)
		(dolist (rec existing)
			(let ((rec-key (funcall key-func rec)))
			  (if (not (string= rec-key match-key))
						(setq new-list (append new-list (list rec)))
			  )
			)
		)
		(message "Deleting Lister Record: %s" match-key)
		(lee-json-write new-list (lister--json-name lister))
	)
)
