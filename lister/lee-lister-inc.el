;; -*- lexical-binding: t -*-

(defun lister--match ()
	(interactive)
	(let* ((lister (lister-curr-lister lister-curr))
	       (curr (lee-json-read (lister--json-name lister)))
			   (select (cdr (assoc (lister-curr-sel lister-curr) (lister-curr-fmt-map lister-curr))))
				 (key-func (list-template-key lister))
				)
		(dolist (el curr)
			(when (string= (funcall key-func el) (funcall key-func select))
				(message "returing: %s" el)
				el
			)
		)
	)
)

(defun alist-inc-key (alist key-func match-key)
  (let* ((ret (list))
				 (i 0)
				 (len (length alist))
				 )
				(message "alist: %s" alist)
		(while (< i len)
			(let ((el (nth i alist)))
				(message "i: %s, len: %s" i len)
				(if (string= match-key (funcall key-func el))
					(if (eq i (- len 1))
							(progn
						   (setq ret (nreverse (append (last alist) (butlast alist))))
						)
					  (progn
						  (push (nth (1+ i) alist) ret)
						  (push el ret)
						  (setq i (+ i 1))
					  )
					)
					(push el ret)
				)
				(setq i (+ i 1))
			)
		)
  (nreverse ret)
	)
)

(defun lister-inc ()
	(let* (
		    (lister (lister-curr-lister lister-curr))
	      (curr (lee-json-read (lister--json-name lister)))
				;(fields (list-template-fields lister))
			  (key-func (list-template-key lister))
			  (sel (cdr (assoc (lister-curr-sel lister-curr) (lister-curr-fmt-map lister-curr))))
			  (sel-key (funcall key-func sel))
				(match (seq-find (lambda (el) (string= sel-key (funcall key-func el))) curr))
				)
		(lee-json-write (alist-inc-key curr key-func (funcall key-func match)) (lister--json-name lister))
	)
)


(defun lister-dec ()
	(let* (
		    (lister (lister-curr-lister lister-curr))
	      (curr (lee-json-read (lister--json-name lister)))
				;(fields (list-template-fields lister))
			  (key-func (list-template-key lister))
			  (sel (cdr (assoc (lister-curr-sel lister-curr) (lister-curr-fmt-map lister-curr))))
			  (sel-key (funcall key-func sel))
				(match (seq-find (lambda (el) (string= sel-key (funcall key-func el))) curr))
				)
		(lee-json-write (nreverse (alist-inc-key (nreverse curr) key-func (funcall key-func match))) (lister--json-name lister))
		;(message "rev: %s" (nreverse (alist-inc-key (nreverse curr) key-func (funcall key-func match))))
	)
)
